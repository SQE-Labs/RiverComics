<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="15" hostname="ankit-gupta" failures="0" tests="78" name="Surefire test" time="0.084" errors="0" timestamp="31 Aug 2023 10:31:40 GMT">
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.646">
    <failure type="org.openqa.selenium.InvalidArgumentException" message="&amp;apos;automationName&amp;apos; can&amp;apos;t be blank
Build info: version: &amp;apos;3.5.3&amp;apos;, revision: &amp;apos;a88d25fe6b&amp;apos;, time: &amp;apos;2017-08-29T12:42:44.417Z&amp;apos;
System info: host: &amp;apos;ankit-gupta&amp;apos;, ip: &amp;apos;192.168.1.31&amp;apos;, os.name: &amp;apos;Windows 11&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.5&amp;apos;
Driver info: driver.version: AndroidDriver
remote stacktrace: InvalidArgumentError: &amp;apos;automationName&amp;apos; can&amp;apos;t be blank
    at processCapabilities (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\capabilities.js:345:13)
    at parseCapsForInnerDriver (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\utils.js:151:40)
    at AppiumDriver.createSession (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:279:49)
    at commandExecutor (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\driver.ts:107:18)
    at AppiumDriver.executeCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\driver.ts:124:15)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at defaultBehavior (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:718:16)
    at AppiumDriver.executeWrappedCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:828:16)
    at AppiumDriver.executeCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:734:17)
    at asyncHandler (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\protocol\protocol.js:393:19)">
      <![CDATA[org.openqa.selenium.InvalidArgumentException: 'automationName' can't be blank
Build info: version: '3.5.3', revision: 'a88d25fe6b', time: '2017-08-29T12:42:44.417Z'
System info: host: 'ankit-gupta', ip: '192.168.1.31', os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.5'
Driver info: driver.version: AndroidDriver
remote stacktrace: InvalidArgumentError: 'automationName' can't be blank
    at processCapabilities (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\capabilities.js:345:13)
    at parseCapsForInnerDriver (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\utils.js:151:40)
    at AppiumDriver.createSession (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:279:49)
    at commandExecutor (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\driver.ts:107:18)
    at AppiumDriver.executeCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\basedriver\driver.ts:124:15)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at defaultBehavior (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:718:16)
    at AppiumDriver.executeWrappedCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:828:16)
    at AppiumDriver.executeCommand (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\lib\appium.js:734:17)
    at asyncHandler (C:\Users\SQE Labs\AppData\Roaming\npm\node_modules\appium\node_modules\@appium\base-driver\lib\protocol\protocol.js:393:19)
	at org.openqa.selenium.remote.W3CHandshakeResponse.lambda$new$0(W3CHandshakeResponse.java:57)
	at org.openqa.selenium.remote.W3CHandshakeResponse.lambda$getResponseFunction$2(W3CHandshakeResponse.java:104)
	at org.openqa.selenium.remote.ProtocolHandshake.lambda$createSession$24(ProtocolHandshake.java:359)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.tryAdvance(Spliterators.java:1002)
	at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)
	at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)
	at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:362)
	at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:136)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:142)
	at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:52)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:646)
	at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)
	at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
	at io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)
	at org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:255)
	at org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:237)
	at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:138)
	at io.appium.java_client.DefaultGenericMobileDriver.<init>(DefaultGenericMobileDriver.java:37)
	at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:160)
	at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:168)
	at io.appium.java_client.android.AndroidDriver.<init>(AndroidDriver.java:69)
	at utilities.DriverManager.initializeDriver(DriverManager.java:56)
	at base.BaseTest.initialize(BaseTest.java:35)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.LoginTest" name="NoUser_Login" time="0.0">
    <skipped/>
  </testcase> <!-- NoUser_Login -->
  <testcase classname="testClasses.LoginTest" name="valid_Login" time="0.0">
    <skipped/>
  </testcase> <!-- valid_Login -->
  <testcase classname="testClasses.LoginTest" name="launchApp_already_LoggedIn_User" time="0.0">
    <skipped/>
  </testcase> <!-- launchApp_already_LoggedIn_User -->
  <testcase classname="testClasses.LoginTest" name="userName_Field_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- userName_Field_Blank -->
  <testcase classname="testClasses.LoginTest" name="password_Field_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- password_Field_Blank -->
  <testcase classname="testClasses.LoginTest" name="invalid_Username_Login" time="0.0">
    <skipped/>
  </testcase> <!-- invalid_Username_Login -->
  <testcase classname="testClasses.UnsubscribedUserTest" name="UnsubscribedUser" time="0.0">
    <skipped/>
  </testcase> <!-- UnsubscribedUser -->
  <testcase classname="testClasses.LoginTest" name="invalid_Password_Login" time="0.0">
    <skipped/>
  </testcase> <!-- invalid_Password_Login -->
  <testcase classname="testClasses.LoginTest" name="decrypted_Password" time="0.0">
    <skipped/>
  </testcase> <!-- decrypted_Password -->
  <testcase classname="testClasses.SubscribedUserTest" name="subscribedUser" time="0.0">
    <skipped/>
  </testcase> <!-- subscribedUser -->
  <testcase classname="testClasses.LoginTest" name="encrypted_Password" time="0.0">
    <skipped/>
  </testcase> <!-- encrypted_Password -->
  <testcase classname="testClasses.LoginTest" name="non_Registered_Email" time="0.0">
    <skipped/>
  </testcase> <!-- non_Registered_Email -->
  <testcase classname="testClasses.LoginTest" name="deleted_Account_Login" time="0.0">
    <skipped/>
  </testcase> <!-- deleted_Account_Login -->
  <testcase classname="testClasses.ForgotPasswordTest" name="forgetPasswordPageOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- forgetPasswordPageOpensUp -->
  <testcase classname="testClasses.ForgotPasswordTest" name="EmailField_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- EmailField_Blank -->
  <testcase classname="testClasses.ForgotPasswordTest" name="enterspaces_EmailField" time="0.0">
    <skipped/>
  </testcase> <!-- enterspaces_EmailField -->
  <testcase classname="testClasses.ForgotPasswordTest" name="invalidEmail" time="0.0">
    <skipped/>
  </testcase> <!-- invalidEmail -->
  <testcase classname="testClasses.ForgotPasswordTest" name="unregisteredEmail" time="0.0">
    <skipped/>
  </testcase> <!-- unregisteredEmail -->
  <testcase classname="testClasses.ForgotPasswordTest" name="registeredEmail" time="0.0">
    <skipped/>
  </testcase> <!-- registeredEmail -->
  <testcase classname="testClasses.ForgotPasswordTest" name="validateEmailReceived" time="0.0">
    <skipped/>
  </testcase> <!-- validateEmailReceived -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validateUnsubscribe_UsernameLogo" time="0.0">
    <skipped/>
  </testcase> <!-- validateUnsubscribe_UsernameLogo -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validateSubscribe_UsernameLogo" time="0.0">
    <skipped/>
  </testcase> <!-- validateSubscribe_UsernameLogo -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validateTabs_SubscribeSearchFavourite" time="0.0">
    <skipped/>
  </testcase> <!-- validateTabs_SubscribeSearchFavourite -->
  <testcase classname="testClasses.HumburgerMenuTest" name="planDetailPage_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- planDetailPage_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="searchTab_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- searchTab_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="nonExistingDataEnteredIn_HamburgerMenu" time="0.0">
    <skipped/>
  </testcase> <!-- nonExistingDataEnteredIn_HamburgerMenu -->
  <testcase classname="testClasses.HumburgerMenuTest" name="SeriesEpisodeTabOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- SeriesEpisodeTabOpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="sharePage_PopUpOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- sharePage_PopUpOpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="settingPage_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- settingPage_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="selectLanugauge_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- selectLanugauge_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="selectedLanguage_Appears" time="0.0">
    <skipped/>
  </testcase> <!-- selectedLanguage_Appears -->
  <testcase classname="testClasses.HumburgerMenuTest" name="updateEmail_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- updateEmail_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="currentEmailBlank_InUpdatedEmail" time="0.0">
    <skipped/>
  </testcase> <!-- currentEmailBlank_InUpdatedEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="NonExistingOrInvalidEmail_InUpdatedEmail" time="0.0">
    <skipped/>
  </testcase> <!-- NonExistingOrInvalidEmail_InUpdatedEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="updateEmailWith_AlreadyRegisteredEmail" time="0.0">
    <skipped/>
  </testcase> <!-- updateEmailWith_AlreadyRegisteredEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="updateEmailWith_NewEmailBlank" time="0.0">
    <skipped/>
  </testcase> <!-- updateEmailWith_NewEmailBlank -->
  <testcase classname="testClasses.HumburgerMenuTest" name="AlreadyRegistered_InAllFields" time="0.0">
    <skipped/>
  </testcase> <!-- AlreadyRegistered_InAllFields -->
  <testcase classname="testClasses.HumburgerMenuTest" name="sameEmailEntered_InCurrentNewEmail" time="0.0">
    <skipped/>
  </testcase> <!-- sameEmailEntered_InCurrentNewEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="confirmEmailBlank_InUpdatedEmail" time="0.0">
    <skipped/>
  </testcase> <!-- confirmEmailBlank_InUpdatedEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="differentEmail_InNewEmailConfirmEmail" time="0.0">
    <skipped/>
  </testcase> <!-- differentEmail_InNewEmailConfirmEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validateLink_OnRegisteredEmail" time="0.0">
    <skipped/>
  </testcase> <!-- validateLink_OnRegisteredEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="enterValidDetailsIn_AllUpdateEmail" time="0.0">
    <skipped/>
  </testcase> <!-- enterValidDetailsIn_AllUpdateEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="loginWith_UpdatedEmail" time="0.0">
    <skipped/>
  </testcase> <!-- loginWith_UpdatedEmail -->
  <testcase classname="testClasses.HumburgerMenuTest" name="updatedEmail_UnderLOGO" time="0.0">
    <skipped/>
  </testcase> <!-- updatedEmail_UnderLOGO -->
  <testcase classname="testClasses.HumburgerMenuTest" name="updatePasswordSubtab_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- updatePasswordSubtab_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="currentPasswordBlank_InUpdatePasswordSubtab" time="0.0">
    <skipped/>
  </testcase> <!-- currentPasswordBlank_InUpdatePasswordSubtab -->
  <testcase classname="testClasses.HumburgerMenuTest" name="invalidPassword_InCurrentPassword" time="0.0">
    <skipped/>
  </testcase> <!-- invalidPassword_InCurrentPassword -->
  <testcase classname="testClasses.HumburgerMenuTest" name="invalidPassword_InNewPassword" time="0.0">
    <skipped/>
  </testcase> <!-- invalidPassword_InNewPassword -->
  <testcase classname="testClasses.HumburgerMenuTest" name="samePassword_InCurrentandNewPassword" time="0.0">
    <skipped/>
  </testcase> <!-- samePassword_InCurrentandNewPassword -->
  <testcase classname="testClasses.HumburgerMenuTest" name="lessThan6_Character_InUpdatePassword" time="0.0">
    <skipped/>
  </testcase> <!-- lessThan6_Character_InUpdatePassword -->
  <testcase classname="testClasses.HumburgerMenuTest" name="diferentPasswords_InNewConfirmField" time="0.0">
    <skipped/>
  </testcase> <!-- diferentPasswords_InNewConfirmField -->
  <testcase classname="testClasses.HumburgerMenuTest" name="confirmNewPassword_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- confirmNewPassword_Blank -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validDetails_WithValidateLoginPassword" time="0.0">
    <skipped/>
  </testcase> <!-- validDetails_WithValidateLoginPassword -->
  <testcase classname="testClasses.HumburgerMenuTest" name="validateDeviceList" time="0.0">
    <skipped/>
  </testcase> <!-- validateDeviceList -->
  <testcase classname="testClasses.HumburgerMenuTest" name="deletePopUp_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- deletePopUp_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="delete_Success" time="0.0">
    <skipped/>
  </testcase> <!-- delete_Success -->
  <testcase classname="testClasses.HumburgerMenuTest" name="loginWith_Deleted_Account" time="0.0">
    <skipped/>
  </testcase> <!-- loginWith_Deleted_Account -->
  <testcase classname="testClasses.HumburgerMenuTest" name="selectLanguagePopUpOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- selectLanguagePopUpOpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="contactUsOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- contactUsOpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="FAQs" time="0.0">
    <skipped/>
  </testcase> <!-- FAQs -->
  <testcase classname="testClasses.HumburgerMenuTest" name="log_OuT_pageOpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- log_OuT_pageOpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="log_OuT_Success" time="0.0">
    <skipped/>
  </testcase> <!-- log_OuT_Success -->
  <testcase classname="testClasses.HumburgerMenuTest" name="privacy_PoLicy" time="0.0">
    <skipped/>
  </testcase> <!-- privacy_PoLicy -->
  <testcase classname="testClasses.HumburgerMenuTest" name="termsAndConditioN" time="0.0">
    <skipped/>
  </testcase> <!-- termsAndConditioN -->
  <testcase classname="testClasses.PlanDetailPasswordTest" name="verifyUIPlanPage" time="0.0">
    <skipped/>
  </testcase> <!-- verifyUIPlanPage -->
  <testcase classname="testClasses.PlanDetailPasswordTest" name="paymentsPage_OpensUp" time="0.0">
    <skipped/>
  </testcase> <!-- paymentsPage_OpensUp -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyUIHomePage" time="0.0">
    <skipped/>
  </testcase> <!-- verifyUIHomePage -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyFavouriteAndSearchIcon_WithSubscribedUser" time="0.0">
    <skipped/>
  </testcase> <!-- verifyFavouriteAndSearchIcon_WithSubscribedUser -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verify5Filter" time="0.0">
    <skipped/>
  </testcase> <!-- verify5Filter -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyIntroEpisodes_ComingSoon" time="0.0">
    <skipped/>
  </testcase> <!-- verifyIntroEpisodes_ComingSoon -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="riverComicsOriginalSeries_Appear" time="0.0">
    <skipped/>
  </testcase> <!-- riverComicsOriginalSeries_Appear -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="allSeries_Appear" time="0.0">
    <skipped/>
  </testcase> <!-- allSeries_Appear -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="selectCategoryPopup_Closed" time="0.0">
    <skipped/>
  </testcase> <!-- selectCategoryPopup_Closed -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="seriesDetailPageOpensUp_AND_sharingPopUpAppear" time="0.0">
    <skipped/>
  </testcase> <!-- seriesDetailPageOpensUp_AND_sharingPopUpAppear -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="addRatingPopUpAppear_AND_RatingGetsUpdated" time="0.0">
    <skipped/>
  </testcase> <!-- addRatingPopUpAppear_AND_RatingGetsUpdated -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyFavouriteIcon" time="0.0">
    <skipped/>
  </testcase> <!-- verifyFavouriteIcon -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyPopUp_SortByNumber_AND_SortByDate" time="0.0">
    <skipped/>
  </testcase> <!-- verifyPopUp_SortByNumber_AND_SortByDate -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verify_IssueCount" time="0.0">
    <skipped/>
  </testcase> <!-- verify_IssueCount -->
  <testcase classname="testClasses.PlanDetailPasswordTest" name="orderSummary" time="0.0">
    <ignored/>
  </testcase> <!-- orderSummary -->
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="testClasses.CategoriesHomePageTest" name="verifyDescriptionExpandRead_AND_CollpaseRead" time="0.0">
    <ignored/>
  </testcase> <!-- verifyDescriptionExpandRead_AND_CollpaseRead -->
  <testcase classname="testClasses.PlanDetailPasswordTest" name="navigateBackTo_PlanPage" time="0.0">
    <ignored/>
  </testcase> <!-- navigateBackTo_PlanPage -->
  <testcase classname="testClasses.PlanDetailPasswordTest" name="changeLanguage_OpensUp" time="0.0">
    <ignored/>
  </testcase> <!-- changeLanguage_OpensUp -->
  <testcase classname="testClasses.HumburgerMenuTest" name="refreshPageOnTap" time="0.0">
    <ignored/>
  </testcase> <!-- refreshPageOnTap -->
  <testcase classname="base.BaseTest" name="@AfterSuite quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite quit -->
  <testcase classname="base.BaseTest" name="@AfterSuite quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite quit -->
  <testcase classname="base.BaseTest" name="@AfterSuite quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite quit -->
  <testcase classname="base.BaseTest" name="@AfterSuite quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite quit -->
  <testcase classname="base.BaseTest" name="@AfterSuite quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite quit -->
</testsuite> <!-- Surefire test -->

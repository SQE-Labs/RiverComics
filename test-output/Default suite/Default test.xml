<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="ankit-gupta" failures="0" tests="11" name="Default test" time="0.084" errors="0" timestamp="2023-09-01T15:19:14 IST">
  <testcase classname="base.BaseTest" name="@BeforeSuite initialize" time="0.024">
    <failure type="java.lang.NoClassDefFoundError" message="org/openqa/selenium/internal/Require">
      <![CDATA[java.lang.NoClassDefFoundError: org/openqa/selenium/internal/Require
at io.appium.java_client.remote.options.BaseOptions.setCapability(BaseOptions.java:144)
at io.appium.java_client.remote.options.CanSetCapability.amend(CanSetCapability.java:30)
at io.appium.java_client.remote.options.BaseOptions.setPlatformName(BaseOptions.java:86)
at io.appium.java_client.android.options.UiAutomator2Options.setCommonOptions(UiAutomator2Options.java:222)
at io.appium.java_client.android.options.UiAutomator2Options.<init>(UiAutomator2Options.java:208)
at utilities.DriverManager.initializeDriver(DriverManager.java:43)
at base.BaseTest.initialize(BaseTest.java:35)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:317)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.ClassNotFoundException: org.openqa.selenium.internal.Require
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
... 26 more
]]>
    </failure>
  </testcase> <!-- @BeforeSuite initialize -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.69356175442E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754425E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.69356175443E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754434E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754436E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754439E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.69356175444E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754442E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754443E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754446E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754447E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.69356175445E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754452E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754455E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754456E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754458E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.69356175446E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754463E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754464E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754466E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="base.BaseTest" name="@BeforeMethod beforeMethod" time="-1.693561754468E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="base.BaseTest" name="@AfterMethod tearDown" time="-1.693561754471E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="testClasses.LoginTest" name="NoUser_Login" time="0.0">
    <skipped/>
  </testcase> <!-- NoUser_Login -->
  <testcase classname="testClasses.LoginTest" name="valid_Login" time="0.0">
    <skipped/>
  </testcase> <!-- valid_Login -->
  <testcase classname="testClasses.LoginTest" name="launchApp_already_LoggedIn_User" time="0.0">
    <skipped/>
  </testcase> <!-- launchApp_already_LoggedIn_User -->
  <testcase classname="testClasses.LoginTest" name="userName_Field_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- userName_Field_Blank -->
  <testcase classname="testClasses.LoginTest" name="password_Field_Blank" time="0.0">
    <skipped/>
  </testcase> <!-- password_Field_Blank -->
  <testcase classname="testClasses.LoginTest" name="invalid_Username_Login" time="0.0">
    <skipped/>
  </testcase> <!-- invalid_Username_Login -->
  <testcase classname="testClasses.LoginTest" name="invalid_Password_Login" time="0.0">
    <skipped/>
  </testcase> <!-- invalid_Password_Login -->
  <testcase classname="testClasses.LoginTest" name="decrypted_Password" time="0.0">
    <skipped/>
  </testcase> <!-- decrypted_Password -->
  <testcase classname="testClasses.LoginTest" name="encrypted_Password" time="0.0">
    <skipped/>
  </testcase> <!-- encrypted_Password -->
  <testcase classname="testClasses.LoginTest" name="non_Registered_Email" time="0.0">
    <skipped/>
  </testcase> <!-- non_Registered_Email -->
  <testcase classname="testClasses.LoginTest" name="deleted_Account_Login" time="0.0">
    <skipped/>
  </testcase> <!-- deleted_Account_Login -->
</testsuite> <!-- Default test -->
